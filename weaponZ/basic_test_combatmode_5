-- Initialization
local fuelThreshold = 200  -- Minimum fuel level before refueling

-- Inventory Slots Configuration
local slots = {
    coal = 1,
    entitySensor = 2,
    blockSensor = 3,
    pickaxe = 4,
    sword = 5
}

-- Whitelist of entities to ignore (passive mobs)
local whitelist = {
    ["minecraft:cow"] = true,
    ["minecraft:sheep"] = true,
    ["minecraft:chicken"] = true,
    ["minecraft:pig"] = true,
}

-- Function to refuel the turtle
function refuelIfNeeded()
    if turtle.getFuelLevel() < fuelThreshold then
        turtle.select(slots.coal)
        if turtle.refuel(0) then  -- Check if this slot has fuel
            turtle.refuel()
            print("Refueled with slot " .. slots.coal)
            return true
        else
            print("WARNING: Out of fuel! Unable to proceed.")
            return false
        end
    end
    return true
end

-- Function to equip a peripheral to a specific side if not already equipped
function ensureEquipped(slot, expectedType, side)
    if not peripheral.isPresent(side) or peripheral.getType(side) ~= expectedType then
        print("Equipping " .. expectedType .. " from slot " .. slot .. " to " .. side)
        turtle.select(slot)
        if side == "left" then
            if not turtle.equipLeft() then
                print("ERROR: Failed to equip " .. expectedType .. " from slot " .. slot .. " to left side.")
                return false
            end
        elseif side == "right" then
            if not turtle.equipRight() then
                print("ERROR: Failed to equip " .. expectedType .. " from slot " .. slot .. " to right side.")
                return false
            end
        end
    end
    return true
end

-- Function to unequip peripherals if necessary
function unequipPeripheral(side)
    if peripheral.isPresent(side) then
        if side == "left" then
            if not turtle.equipLeft() then
                print("ERROR: Failed to unequip peripheral from left side.")
                return false
            end
        elseif side == "right" then
            if not turtle.equipRight() then
                print("ERROR: Failed to unequip peripheral from right side.")
                return false
            end
        end
    end
    return true
end

-- Function to detect entities using the Plethora sensor and pathfind to them
function detectAndAttackEntities()
    -- Ensure the entity sensor is equipped on the left side
    if not ensureEquipped(slots.entitySensor, "plethora:sensor", "left") then
        print("Cannot detect entities without sensor.")
        return false
    end

    local sensor = peripheral.wrap("left")  -- Wrap the sensor on the left side
    if not sensor then
        print("Sensor not found.")
        return false
    end

    while true do
        local entities = sensor.sense()  -- Detect all nearby entities
        local targetEntity = nil

        -- Find the first non-whitelisted entity
        for _, entity in pairs(entities) do
            if not whitelist[entity.name] then
                targetEntity = entity
                break
            end
        end

        if not targetEntity then
            print("No hostile entities found.")
            return false
        end

        print("Hostile entity detected: " .. targetEntity.name)

        -- Improved pathfinding logic to approach the entity
        while true do
            -- Calculate distances to the target on x and z axes
            local distanceX = targetEntity.x
            local distanceZ = targetEntity.z

            -- Determine if we're close enough to attack
            if math.abs(distanceX) <= 1 and math.abs(distanceZ) <= 1 then
                print("Entity within range. Preparing to attack.")
                break
            end

            -- Determine movement priority: move along the axis with the larger distance
            if math.abs(distanceX) > math.abs(distanceZ) then
                -- Move in the x direction
                if distanceX > 0 then
                    faceDirection("forward")
                    moveForwardWithObstacleHandling()
                else
                    faceDirection("backward")
                    moveForwardWithObstacleHandling()
                end
            else
                -- Move in the z direction
                if distanceZ > 0 then
                    faceDirection("right")
                    moveForwardWithObstacleHandling()
                else
                    faceDirection("left")
                    moveForwardWithObstacleHandling()
                end
            end

            -- Re-sense entities to get updated coordinates of the target
            entities = sensor.sense()
            targetEntity = nil
            for _, entity in pairs(entities) do
                if not whitelist[entity.name] then
                    targetEntity = entity
                    break
                end
            end

            if not targetEntity then
                print("Lost sight of the entity.")
                return false
            end
        end

        -- Unequip any peripheral to equip the sword
        unequipPeripheral("right")
        unequipPeripheral("left")

        -- Equip the sword and attempt to attack
        turtle.select(slots.sword)
        if turtle.attack() then
            print("Attacked entity: " .. targetEntity.name)
            return true
        else
            print("Attack failed, entity out of range or blocked.")
        end
    end
end

-- Function to move forward with obstacle handling
function moveForwardWithObstacleHandling()
    if not turtle.forward() then
        if turtle.detect() then
            print("Obstacle detected. Attempting to dig.")
            turtle.dig()
            if not turtle.forward() then
                print("Failed to move forward after digging.")
            end
        else
            print("Unable to move forward due to an unknown issue.")
        end
    end
end

-- Function to face a specific direction
function faceDirection(direction)
    -- Face the specified direction relative to the current position
    if direction == "forward" then
        -- No action needed, facing forward by default
    elseif direction == "backward" then
        turtle.turnLeft()
        turtle.turnLeft()
    elseif direction == "right" then
        turtle.turnRight()
    elseif direction == "left" then
        turtle.turnLeft()
    end
end

-- Main function to run the turtle operations
function main()
    refuelIfNeeded()

    -- Step 1: Enter combat mode
    print("Entering combat mode.")
    local foundAndAttacked = detectAndAttackEntities()
    if foundAndAttacked then
        print("Hostile entity neutralized.")
    else
        print("No entities left or target lost.")
    end

    print("Operation complete.")
end

-- Run the main function
main()
