-- Initialization
local fuelThreshold = 200  -- Minimum fuel level before refueling

-- Inventory Slots Configuration
local slots = {
    coal = 1,
    entitySensor = 2,
    blockScanner = 3,
    pickaxe = 4,
    sword = 5
}

-- Whitelist of entities to ignore (passive mobs)
local whitelist = {
    ["minecraft:cow"] = true,
    ["minecraft:sheep"] = true,
    ["minecraft:chicken"] = true,
    ["minecraft:pig"] = true,
}

-- Variables to track turtle's current position and direction
local currentX, currentY, currentZ = 0, 0, 0
local currentFacing = "north"  -- Default starting facing direction

-- Function to refuel the turtle
function refuelIfNeeded()
    if turtle.getFuelLevel() < fuelThreshold then
        print("DEBUG: Checking for fuel in slot " .. slots.coal)
        turtle.select(slots.coal)
        if turtle.refuel(0) then  -- Check if this slot has fuel
            turtle.refuel()
            print("DEBUG: Refueled with slot " .. slots.coal)
            return true
        else
            print("WARNING: Out of fuel! Unable to proceed.")
            return false
        end
    end
    print("DEBUG: Fuel level sufficient, proceeding.")
    return true
end

-- Function to equip a peripheral to a specific side if not already equipped
function ensureEquipped(slot, expectedType, side)
    print("DEBUG: Checking peripheral on side " .. side .. " for " .. expectedType)
    if not peripheral.isPresent(side) or peripheral.getType(side) ~= expectedType then
        print("DEBUG: Equipping " .. expectedType .. " from slot " .. slot .. " to " .. side)
        turtle.select(slot)
        if side == "left" then
            if not turtle.equipLeft() then
                print("ERROR: Failed to equip " .. expectedType .. " from slot " .. slot .. " to left side.")
                return false
            end
        elseif side == "right" then
            if not turtle.equipRight() then
                print("ERROR: Failed to equip " .. expectedType .. " from slot " .. slot .. " to right side.")
                return false
            end
        end
    else
        print("DEBUG: Peripheral already equipped.")
    end
    return true
end

-- Function to track the turtle's movement and update coordinates
function updatePosition(movement)
    print("DEBUG: Updating position for movement: " .. movement)
    if movement == "forward" then
        if currentFacing == "north" then
            currentZ = currentZ - 1
        elseif currentFacing == "south" then
            currentZ = currentZ + 1
        elseif currentFacing == "east" then
            currentX = currentX + 1
        elseif currentFacing == "west" then
            currentX = currentX - 1
        end
    elseif movement == "backward" then
        if currentFacing == "north" then
            currentZ = currentZ + 1
        elseif currentFacing == "south" then
            currentZ = currentZ - 1
        elseif currentFacing == "east" then
            currentX = currentX - 1
        elseif currentFacing == "west" then
            currentX = currentX + 1
        end
    elseif movement == "up" then
        currentY = currentY + 1
    elseif movement == "down" then
        currentY = currentY - 1
    end
    print("DEBUG: Current Coordinates after movement: X=" .. currentX .. " Y=" .. currentY .. " Z=" .. currentZ)
end

-- Function to rotate and adjust the facing direction
function adjustFacing(turn)
    print("DEBUG: Adjusting facing direction to " .. turn)
    if turn == "left" then
        if currentFacing == "north" then
            currentFacing = "west"
        elseif currentFacing == "west" then
            currentFacing = "south"
        elseif currentFacing == "south" then
            currentFacing = "east"
        elseif currentFacing == "east" then
            currentFacing = "north"
        end
    elseif turn == "right" then
        if currentFacing == "north" then
            currentFacing = "east"
        elseif currentFacing == "east" then
            currentFacing = "south"
        elseif currentFacing == "south" then
            currentFacing = "west"
        elseif currentFacing == "west" then
            currentFacing = "north"
        end
    end
    print("DEBUG: Current Facing: " .. currentFacing)
end

-- Function to move forward with obstacle handling and update position
function moveForwardWithObstacleHandling()
    print("DEBUG: Attempting to move forward.")
    if not turtle.forward() then
        if turtle.detect() then
            print("DEBUG: Obstacle detected. Attempting to dig.")
            turtle.dig()
            if not turtle.forward() then
                print("ERROR: Failed to move forward after digging.")
            end
        else
            print("ERROR: Unable to move forward due to an unknown issue.")
        end
    else
        updatePosition("forward")
    end
end

-- Function to detect entities using the Plethora sensor and pathfind to them
function detectAndAttackEntities()
    print("DEBUG: Entering entity detection.")
    if not ensureEquipped(slots.entitySensor, "plethora:sensor", "left") then
        print("ERROR: Cannot detect entities without sensor.")
        return false
    end

    local sensor = peripheral.wrap("left")
    if not sensor then
        print("ERROR: Sensor not found.")
        return false
    end

    while true do
        local entities = sensor.sense()
        print("DEBUG: Detected entities count: " .. #entities)

        local targetEntity = nil
        for _, entity in pairs(entities) do
            if entity.type ~= "item" and not whitelist[entity.name] and entity.name ~= "computercraft:turtle" then
                print("DEBUG: Potential target entity found: " .. entity.name)
                targetEntity = entity
                break
            end
        end

        if not targetEntity then
            print("DEBUG: No hostile entities found.")
            return false
        end

        print("DEBUG: Hostile entity detected: " .. targetEntity.name)

        if not ensureEquipped(slots.blockScanner, "plethora:blockScanner", "right") then
            print("ERROR: Failed to equip block scanner.")
            return false
        end

        -- Update the target's coordinates and round them
        local targetX = math.floor(targetEntity.x + 0.5)
        local targetY = math.floor(targetEntity.y + 0.5)
        local targetZ = math.floor(targetEntity.z + 0.5)

        print("DEBUG: Rounded Target Coordinates: X=" .. targetX .. " Y=" .. targetY .. " Z=" .. targetZ)

        moveToTarget(targetX, targetY, targetZ)

        if not ensureEquipped(slots.sword, "minecraft:diamond_sword", "right") then
            print("ERROR: Failed to equip sword.")
            return false
        end

        if turtle.attack() then
            print("DEBUG: Attacked entity: " .. targetEntity.name)
            return true
        else
            print("DEBUG: Attack failed, entity out of range or blocked.")
        end
    end
end

-- Function to move towards the target coordinates stepwise
function moveToTarget(targetX, targetY, targetZ)
    print("DEBUG: Moving to target.")
    while currentY ~= targetY do
        print("DEBUG: Moving along Y-axis. Current Y=" .. currentY .. ", Target Y=" .. targetY)
        if currentY < targetY then
            if turtle.up() then
                updatePosition("up")
            else
                print("ERROR: Failed to move up.")
                return
            end
        elseif currentY > targetY then
            if turtle.down() then
                updatePosition("down")
            else
                print("ERROR: Failed to move down.")
                return
            end
        end
    end

    while currentX ~= targetX do
        print("DEBUG: Moving along X-axis. Current X=" .. currentX .. ", Target X=" .. targetX)
        if currentX < targetX then
            faceDirection("east")
            moveForwardWithObstacleHandling()
        elseif currentX > targetX then
            faceDirection("west")
            moveForwardWithObstacleHandling()
        end
    end

    while currentZ ~= targetZ do
        print("DEBUG: Moving along Z-axis. Current Z=" .. currentZ .. ", Target Z=" .. targetZ)
        if currentZ < targetZ then
            faceDirection("south")
            moveForwardWithObstacleHandling()
        elseif currentZ > targetZ then
            faceDirection("north")
            moveForwardWithObstacleHandling()
        end
    end
end

-- Function to face a specific direction
function faceDirection(direction)
    print("DEBUG: Facing direction " .. direction)
    while currentFacing ~= direction do
        turtle.turnRight()
        adjustFacing("right")
    end
end

-- Main function to run the turtle operations
function main()
    print("DEBUG: Starting main function.")
    refuelIfNeeded()

    print("DEBUG: Entering combat mode.")
    local foundAndAttacked = detectAndAttackEntities()
    if foundAndAttacked then
        print("DEBUG: Hostile entity neutralized.")
    else
        print("DEBUG: No entities left or target lost.")
    end

    print("DEBUG: Operation complete.")
end

-- Run the main function
main()
