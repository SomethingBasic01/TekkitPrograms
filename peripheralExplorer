-- Function to display long strings with pagination
local function printPaged(text)
    local lines = {}
    for line in text:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    local currentPage = 1
    local linesPerPage = term.getSize() - 4
    local totalPages = math.ceil(#lines / linesPerPage)

    while true do
        term.clear()
        term.setCursorPos(1, 1)
        print("Output (Page " .. currentPage .. " of " .. totalPages .. ")")
        print("Use Up/Down to scroll, Q to return")

        local startLine = (currentPage - 1) * linesPerPage + 1
        local endLine = math.min(currentPage * linesPerPage, #lines)

        for i = startLine, endLine do
            print(lines[i])
        end

        -- Wait for user input
        local event, key = os.pullEvent("key")

        if key == keys.down and currentPage < totalPages then
            currentPage = currentPage + 1
        elseif key == keys.up and currentPage > 1 then
            currentPage = currentPage - 1
        elseif key == keys.q then
            break
        end
    end
end

-- Function to display table contents with pagination
local function printTablePaged(t)
    local lines = {}

    -- Function to recursively add lines from a table
    local function addLines(tbl, indent)
        indent = indent or 0
        local indentStr = string.rep("  ", indent)
        
        for k, v in pairs(tbl) do
            if type(v) == "table" then
                table.insert(lines, indentStr .. tostring(k) .. ":")
                addLines(v, indent + 1)
            else
                table.insert(lines, indentStr .. tostring(k) .. ": " .. tostring(v))
            end
        end
    end

    -- Generate the lines to be displayed
    addLines(t)

    local currentPage = 1
    local linesPerPage = term.getSize() - 4
    local totalPages = math.ceil(#lines / linesPerPage)

    while true do
        term.clear()
        term.setCursorPos(1, 1)
        print("Output (Page " .. currentPage .. " of " .. totalPages .. ")")
        print("Use Up/Down to scroll, Q to return")

        local startLine = (currentPage - 1) * linesPerPage + 1
        local endLine = math.min(currentPage * linesPerPage, #lines)

        for i = startLine, endLine do
            print(lines[i])
        end

        -- Wait for user input
        local event, key = os.pullEvent("key")

        if key == keys.down and currentPage < totalPages then
            currentPage = currentPage + 1
        elseif key == keys.up and currentPage > 1 then
            currentPage = currentPage - 1
        elseif key == keys.q then
            break
        end
    end
end

-- Function to list and interact with methods of a peripheral
local function interactWithPeripheral(side)
    if peripheral.isPresent(side) then
        local methods = peripheral.getMethods(side)
        if methods then
            local selected = 1
            local running = true

            while running do
                term.clear()
                term.setCursorPos(1, 1)
                print("Peripheral on side " .. side .. " - Select a method to call:")
                print("Use Up/Down to navigate, Enter to select, Q to quit")
                
                for i, method in ipairs(methods) do
                    if i == selected then
                        print("-> " .. method)
                    else
                        print("   " .. method)
                    end
                end

                -- Wait for user input
                local event, key = os.pullEvent("key")
                
                if key == keys.up then
                    if selected > 1 then
                        selected = selected - 1
                    end
                elseif key == keys.down then
                    if selected < #methods then
                        selected = selected + 1
                    end
                elseif key == keys.enter then
                    term.clear()
                    term.setCursorPos(1, 1)
                    print("Calling method: " .. methods[selected])
                    
                    -- Call the method and handle result
                    local result = peripheral.call(side, methods[selected])
                    
                    if type(result) == "string" then
                        printPaged(result)
                    elseif type(result) == "table" then
                        printTablePaged(result)
                    else
                        print("Method returned: " .. tostring(result))
                        print("\nPress any key to return to the method list.")
                        os.pullEvent("key")
                    end
                elseif key == keys.q then
                    running = false
                end
            end
        else
            print("No methods available on peripheral.")
        end
    else
        print("No peripheral on side " .. side)
    end
end

-- Function to select which side to explore
local function selectSide()
    local sides = {"left", "right", "top", "bottom", "front", "back"}
    local selected = 1
    local running = true

    while running do
        term.clear()
        term.setCursorPos(1, 1)
        print("Select a side to explore:")
        print("Use Up/Down to navigate, Enter to select, Q to quit")

        for i, side in ipairs(sides) do
            if i == selected then
                print("-> " .. side)
            else
                print("   " .. side)
            end
        end

        -- Wait for user input
        local event, key = os.pullEvent("key")
        
        if key == keys.up then
            if selected > 1 then
                selected = selected - 1
            end
        elseif key == keys.down then
            if selected < #sides then
                selected = selected + 1
            end
        elseif key == keys.enter then
            interactWithPeripheral(sides[selected])
        elseif key == keys.q then
            running = false
        end
    end
end

-- Run the program
selectSide()
