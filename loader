-- loader.lua
local base64Encoded = [[

]]

-- A small function to decode base64
local function decodeBase64(data)
  local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  data = string.gsub(data, '[^'..b..'=]', '')
  return (data:gsub('.', function(x)
    if x == '=' then return '' end
    local r,f='',(b:find(x)-1)
    for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
    return r
  end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
    if #x ~= 8 then return '' end
    local c=0
    for i=1,8 do c=c+ (string.sub(x,i,i)=='1' and 2^(8-i) or 0) end
    return string.char(c)
  end))
end

-- Decode the real code
local realCode = decodeBase64(base64Encoded)

-- Now load it as a Lua chunk and run
local fn, err = load(realCode, "decoded", "t", _ENV)
if not fn then
  error("Failed to load decoded code: "..(err or "unknown error"))
end
fn()
